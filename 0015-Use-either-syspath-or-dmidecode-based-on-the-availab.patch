From 8b7c7077c1e3dbd68f686dd9f9a47b3e83b3a802 Mon Sep 17 00:00:00 2001
From: Ben Howard <ben.howard@canonical.com>
Date: Wed, 21 Jan 2015 15:42:55 -0700
Subject: [PATCH 1/2] Use either syspath or dmidecode based on the
 availability.

(cherry picked from commit c80892c9c326716724c3ff06d9a82516a4152c74)

Signed-off-by: Ryan McCabe <rmccabe@redhat.com>
Resolves: rhbz#1495471
---
 cloudinit/util.py            | 35 ++++++++++++++++++++++++++++++++++-
 tests/unittests/test_util.py | 30 +++++++++++++++++++++++++++++-
 2 files changed, 63 insertions(+), 2 deletions(-)

diff --git a/cloudinit/util.py b/cloudinit/util.py
index c4696252..58ee6e32 100644
--- a/cloudinit/util.py
+++ b/cloudinit/util.py
@@ -1981,7 +1981,7 @@ def human2bytes(size):
     return int(num * mpliers[mplier])
 
 
-def read_dmi_data(key):
+def _read_dmi_syspath(key):
     """
     Reads dmi data with from /sys/class/dmi/id
     """
@@ -2004,3 +2004,36 @@ def read_dmi_data(key):
     except Exception as e:
         logexc(LOG, "failed read of {0}".format(dmi_key), e)
         return None
+
+
+def _call_dmidecode(key, dmidecode_path):
+    """
+    Calls out to dmidecode to get the data out. This is mostly for supporting
+    OS's without /sys/class/dmi/id support.
+    """
+    try:
+        cmd = [dmidecode_path, "--string", key]
+        (result, _err) = subp(cmd)
+        LOG.debug("dmidecode returned '{}' for '{}'".format(result, key))
+        return result
+    except OSError, _err:
+        LOG.debug('failed dmidecode cmd: {}\n{}'.format(cmd, _err.message))
+        return None
+
+
+def read_dmi_data(key):
+    """
+    Wrapper for reading DMI data. This tries to determine whether the DMI
+    Data can be read directly, otherwise it will fallback to using dmidecode.
+    """
+    if os.path.exists(DMI_SYS_PATH):
+        return _read_dmi_syspath(key)
+
+    dmidecode_path = which('dmidecode')
+    if dmidecode_path:
+        return _call_dmidecode(key, dmidecode_path)
+
+    LOG.warn("did not find either path {} or dmidecode command".format(
+             DMI_SYS_PATH))
+
+    return None
diff --git a/tests/unittests/test_util.py b/tests/unittests/test_util.py
index 20958bdc..6389e6ad 100644
--- a/tests/unittests/test_util.py
+++ b/tests/unittests/test_util.py
@@ -316,6 +316,7 @@ class TestReadDMIData(helpers.FilesystemMockingTestCase):
         self.patchUtils(root)
 
     def _write_key(self, key, content):
+        """Mocks the sys path found on Linux systems."""
         new_root = self.makeDir()
         self._patchIn(new_root)
         util.ensure_dir(os.path.join('sys', 'class', 'dmi', 'id'))
@@ -323,6 +324,24 @@ class TestReadDMIData(helpers.FilesystemMockingTestCase):
         dmi_key = "/sys/class/dmi/id/{0}".format(key)
         util.write_file(dmi_key, content)
 
+    def _no_syspath(self, key, content):
+        """
+        In order to test a missing sys path and call outs to dmidecode, this
+        function fakes the results of dmidecode to test the results.
+        """
+        new_root = self.makeDir()
+        self._patchIn(new_root)
+        self.real_which = util.which
+        self.real_subp = util.subp
+
+        def _which(key):
+            return True
+        util.which = _which
+
+        def _cdd(_key, error=None):
+            return (content, error)
+        util.subp = _cdd
+
     def test_key(self):
         key_content = "TEST-KEY-DATA"
         self._write_key("key", key_content)
@@ -330,9 +349,18 @@ class TestReadDMIData(helpers.FilesystemMockingTestCase):
 
     def test_key_mismatch(self):
         self._write_key("test", "ABC")
-        self.assertNotEqual("123",  util.read_dmi_data("test"))
+        self.assertNotEqual("123", util.read_dmi_data("test"))
 
     def test_no_key(self):
+        self._no_syspath(None, None)
         self.assertFalse(util.read_dmi_data("key"))
 
+    def test_callout_dmidecode(self):
+        """test to make sure that dmidecode is used when no syspath"""
+        self._no_syspath("key", "stuff")
+        self.assertEquals("stuff", util.read_dmi_data("key"))
+        self._no_syspath("key", None)
+        self.assertFalse(None, util.read_dmi_data("key"))
+
+
 # vi: ts=4 expandtab
-- 
2.13.5

